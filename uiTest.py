# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uiTest.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
from PIL import Image
import requests
import  urllib
from random import randint
from PyQt5.QtCore import *
from PyQt5.QtGui import*
from urllib.request import urlopen
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QInputDialog, QLineEdit, QListWidgetItem 
from PyQt5.QtWidgets import QApplication, QWidget, QListWidget, QVBoxLayout, QListWidgetItem 

nameList = []
idList = []
yesList = []
noList = []
genresList = []
visitedList = []

imageUrl = 'https://image.tmdb.org/t/p/w500///hm58Jw4Lw8OIeECIq5qyPYhAeRJ.jpg'
imageData = urllib.request.urlopen(imageUrl).read()
image = QtGui.QImage()
image.loadFromData(imageData)
image.load('movieMatch.jpg')

urlG = 'https://api.themoviedb.org/3/genre/movie/list?api_key=31657fcbc4dc6a9f0e0277b60a6314e9&language=en-US'
json_objG = urlopen(urlG)
dataG = json.load(json_objG)
varG = dataG['genres']
list_lenG = len(dataG['genres'])
i = 0
while dataG['genres'] is not None:
    nameList.append(varG[i]['name'])
    idList.append(varG[i]['id'])
    i += 1
    if i == list_lenG:
        break

def getGenreID(genreName):
    return idList[nameList.index(genreName)]
def getGenreName(genreID):
    return nameList[idList.index(genreID)]

genreString = ""

url = "https://api.themoviedb.org/3/discover/movie?api_key=31657fcbc4dc6a9f0e0277b60a6314e9&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres={}%2C35&page="
urlT = "https://api.themoviedb.org/3/movie/popular?api_key=31657fcbc4dc6a9f0e0277b60a6314e9&page=1"
json_obj = urlopen(urlT)
data = json.load(json_obj)
i = 0
var = data['results']
list_len = len(data['results'])
page = 1


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 600, 1080))
        self.stackedWidget.setObjectName("stackedWidget")

        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")


        self.skipButton = QtWidgets.QPushButton(self.page)
        self.skipButton.setGeometry(QtCore.QRect(40,780,250,100))
        self.skipButton.setObjectName("skipButton")
        self.skipButton.clicked.connect(self.skipClicked)

        self.watchButton = QtWidgets.QPushButton(self.page)
        self.watchButton.setGeometry(QtCore.QRect(310, 780, 250, 100))
        self.watchButton.setObjectName("watchButton")
        self.watchButton.clicked.connect(self.watchClicked)


        self.swipeButton = QtWidgets.QPushButton(self.page)
        self.swipeButton.setGeometry(QtCore.QRect(255,950,90,31))
        self.swipeButton.setObjectName("swipeButton")
        self.swipeButton.clicked.connect(self.swipeClicked)

        self.testButton = QtWidgets.QPushButton(self.page)
        self.testButton.setGeometry(QtCore.QRect(255,915,90,31))
        self.testButton.setObjectName("testButton")
        self.testButton.clicked.connect(self.testClicked)

        self.printButton = QtWidgets.QPushButton(self.page)
        self.printButton.setGeometry(QtCore.QRect(255,985,90,31))
        self.printButton.setObjectName("printButton")
        self.printButton.clicked.connect(self.printClicked)

        self.infoLabel = QtWidgets.QLabel(self.page)
        self.infoLabel.setGeometry(QtCore.QRect(50,10,500,750))
        self.infoLabel.setObjectName("infoLabel")
    

        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")

        self.testButton2 = QtWidgets.QPushButton(self.page_2)
        self.testButton2.setGeometry(QtCore.QRect(265,1020,70,31))
        self.testButton2.setObjectName("testButton2")
        self.testButton2.clicked.connect(self.testClicked2)

        self.genreList = QtWidgets.QListView(self.page_2)
        self.genreList.setGeometry(QtCore.QRect(50,10,500,750))
        self.model = QtGui.QStandardItemModel()
        o = 0
        for i in nameList:
            item = QtGui.QStandardItem(nameList[o])
            item.setCheckable(True)
            item.setCheckState(QtCore.Qt.Unchecked)
            item.setSelectable(False)
            self.model.appendRow(item)
            o += 1
        self.genreList.setModel(self.model)

        self.stackedWidget.addWidget(self.page_2)

        self.page_3 = QtWidgets.QWidget()
        self.page.setObjectName("page_3")

        self.outputList = QtWidgets.QListView(self.page_3)
        self.outputList.setGeometry(QtCore.QRect(0, 0, 601, 791))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model2 = QtGui.QStandardItemModel()
        self.outputList.setFont(font)
        self.outputList.setObjectName("outputList")
        self.outputList.clicked[QtCore.QModelIndex].connect(self.on_clicked)
        self.outputWatch = QtWidgets.QPushButton(self.page_3)
        self.outputWatch.setGeometry(QtCore.QRect(310, 850, 250, 100))
        self.outputWatch.setObjectName("outputWatch")
        self.outputWatch.clicked.connect(self.outputWClicked)
        self.outputSkip = QtWidgets.QPushButton(self.page_3)
        self.outputSkip.setGeometry(QtCore.QRect(40, 850, 250, 100))
        self.outputSkip.setObjectName("outputSkip")
        self.outputSkip.clicked.connect(self.outputNClicked)
        self.stackedWidget.addWidget(self.page_3)
        self.returnButton = QtWidgets.QPushButton(self.page_3)
        self.returnButton.setGeometry(QtCore.QRect(255,985,90,31))
        self.returnButton.setObjectName("returnButton")
        self.returnButton.clicked.connect(self.returnClicked)
        

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 838, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.skipButton.setText(_translate("MainWindow", "Skip!"))
        self.watchButton.setText(_translate("MainWindow", "Watch!"))
        self.infoLabel.setText("")
        self.infoLabel.setPixmap(QtGui.QPixmap(image))
        self.swipeButton.setText(_translate("MainWindow", "Start Swiping"))
        self.printButton.setText(_translate("MainWindow", "Print List"))
        self.testButton.setText(_translate("MainWindow", "Choose Genres"))
        self.testButton2.setText(_translate("MainWindow", "Done"))
        self.outputWatch.setText(_translate("MainWindow", "View Watch List"))
        self.outputSkip.setText(_translate("MainWindow", "View Skip List"))
        self.returnButton.setText(_translate("MainWindow", "Return"))

    def watchClicked(self):
        global i
        print(i)
        yesList.append(var[i]['title'])
        i += 1
        if i == 20:
            self.updateLink()
        else:
            self.updateInfo()

    def skipClicked(self):
        global i
        noList.append(var[i]['title'])
        i += 1
        if i == 20:
            self.updateLink()
        else:
            self.updateInfo()

    def addGenreClicked(self):
        global genreString
        if self.inputGenres.text() != "":
            genreString += str(getGenreID(self.inputGenres.text())) + ','
            self.inputGenres.setText("")
        else:
            print("No Genres Inputted")
        print(genreString)
    
    def swipeClicked(self): 
        global url
        global json_obj
        global data
        global urlT
        global i
        global var
        global list_len
        global imageData
        global imageUrl
        global image
        global visitedList
        i = 0
        strGenre = ""
        for item in genresList:
            strGenre += str(getGenreID(item)) + ","
        url = url.format(strGenre)
        urlT = url + str(page)
        print(urlT)
        json_obj = urlopen(urlT)
        data = json.load(json_obj)
        i = 0
        var = data['results']
        list_len = len(data['results'])
        self.updateInfo()
    
    def updateInfo(self):
        print("here")
        global imageData
        global imageUrl
        global image
        global visitedList
        global i
        if var[i]['id'] not in visitedList:
            visitedList.append(var[i]['id'])
            imageUrl = 'https://image.tmdb.org/t/p/w500/'
            imageData = urllib.request.urlopen(imageUrl + var[i]['poster_path']).read()
            image = QtGui.QImage()
            image.loadFromData(imageData)
            self.infoLabel.setPixmap(QtGui.QPixmap(image))

    def updateLink(self):
        global url
        global json_obj
        global data
        global urlT
        global i
        global var
        global list_len
        global imageData
        global imageUrl
        global image
        global visitedList
        global page
        page += 1
        urlT = url + str(page)
        print(urlT)
        json_obj = urlopen(urlT)
        data = json.load(json_obj)
        i = 0
        var = data['results']
        list_len = len(data['results'])
        self.updateInfo()    

    def printClicked(self):
        global yesList
        self.stackedWidget.setCurrentIndex(2)
    def testClicked(self):
        self.stackedWidget.setCurrentIndex(1)
    def testClicked2(self):
        for i in range(self.model.rowCount()): 
            item = self.model.item(i)
            if item.checkState() == 2:
                genresList.append(item.text())
        print(genresList)
        self.stackedWidget.setCurrentIndex(0)
    def returnClicked(self):
        self.stackedWidget.setCurrentIndex(0)
    def outputWClicked(self):
        o = 0
        self.model2 = QtGui.QStandardItemModel()
        for i in yesList:
            item2 = QtGui.QStandardItem(yesList[o])
            item2.setSelectable(True)
            self.model2.appendRow(item2)
            o += 1
        self.outputList.setModel(self.model2)
    def outputNClicked(self):
        o = 0
        self.model2 = QtGui.QStandardItemModel()
        for i in noList:
            item2 = QtGui.QStandardItem(noList[o])
            item2.setSelectable(True)
            self.model2.appendRow(item2)
            o += 1
        self.outputList.setModel(self.model2)
    def removeSelected(self):
        for i in range(self.model2.rowCount()): 
            item = self.model2.item(i)
            print(str(item.data()))
    def on_clicked(self,index):
        global yesList
        global noList
        item = self.model2.itemFromIndex(index)
        strI = item.text()
        index2 = 0
        print(strI)
        for i in range(self.model2.rowCount()):
            if item == self.model2.item(i):
                self.model2.removeRow(index2)
            index2 += 1
        if strI in yesList:
            yesList.remove(strI)
        if strI in noList:
            noList.remove(strI)
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
